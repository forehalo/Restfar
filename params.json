{
  "name": "Restfar",
  "tagline": "A restful API client for uwp",
  "body": "## Restfar V1\r\n\r\nCurrently an excellent RESTful http client for UWP(Universal Windows Plateform) application, type-safe, elegant.\r\n\r\nIt's inspired by [Retrofit](http://square.github.io/retrofit/).\r\n\r\n## Install\r\n\r\nYou can install it from [nuget](https://www.nuget.org/packages/Restfar) or run the following command in the `Package Manager Console` in Visual Studio\r\n\r\n```\r\nPM> Install-Package Restfar\r\n```\r\n\r\nThe only one dependency is [Newtonsoft.Json](https://www.nuget.org/packages/Newtonsoft.Json/), nuget will automatic install this for you.\r\n\r\n\r\n## Usage\r\n\r\n### Basic\r\nRestfar turns your HTTP API into a interface:\r\n\r\n```c#\r\npublic interface APIService\r\n{\r\n    [Get(\"/users/{user}\")]\r\n    Task<User> GetUser([Path(\"user\")] string user);\r\n\r\n    [FormUrlEncoded]\r\n    [Post(\"users\")]\r\n    Task CreateUser([Field(\"username\")] string username, [Field(\"password\")] string password);\r\n}\r\n```\r\n\r\nAfter define your API, use `RestfarClient` to create an instance of your `APIService` interface.\r\n\r\n```c#\r\nvar restfar = new RestfarClient(\"https://api.github.com\");\r\nvar API = restfar.Create<APIService>(); // return an instance of type APIService \r\n```\r\n\r\nThen, call the API! Unimaginable!\r\n\r\n```c#\r\nvar user = await API.GetUser('forehalo');\r\n```\r\n\r\n### API Declaration\r\n\r\nRestfar uses C# attribute to define your API. You can custom the URL, headers, query strings.\r\n\r\n**Reqeust Method**\r\n\r\nEvery method must have an HTTP Method Attribute to specify the request method and relative URL. Six build-in attributes enable:\r\n`GET`, `POST`, `PUT`, `DELETE`, `HEAD` and `OPTIONS`. These attribute can only decorate method. Query string is allowable.\r\n\r\n```c#\r\n[Get(\"/users?list=all\")]\r\nTask<List<User>> GetUsers();\r\n```\r\n\r\n### Dynamic URL\r\n\r\nNot only const relative Url can be used. You can use replacement blocks as placeholder and replace it at runtime. A replacement block is\r\na string surrounded by `{` and `}`. There must be a `Path` attribute using the same string with placeholder. An ArgumentException will be thown if\r\n`Path` attribute added but no the same name placeholder.\r\n\r\n```c#\r\n[Get(\"/users/{user}\")]\r\nTask<User> GetUser([Path(\"user\")] string user);\r\n```\r\n\r\nAdd query string using `Qeury` attribute.\r\n\r\n```c#\r\n[Get(\"/users/{user}\")]\r\nTask<User> GetUser([Path(\"user\")] string user, [Query(\"list\")] string list);\r\n```\r\n\r\n### Headers\r\n\r\nThere are three ways to custom your headers, ** global(static), method(static), parameter(dynamic) **.\r\nAll of them use a `Header` attribute which need an array of string as parameter.\r\n\r\nYou may want to add a same header to each HTTP request. Writing `Headers` again and again is foolish. So, a convenient way:\r\n\r\n```c#\r\n[Headers(new []{\"global-header: content\"})]\r\npublic interface APIService{}\r\n```\r\n\r\nAdd headers to one method:\r\n\r\n```c#\r\n[Headers(new []{\"method-header: content\"})]\r\n[Get(\"/users/{user}\")]\r\nTask<User> GetUser([Path(\"user\")] string user);\r\n```\r\n\r\nAdd headers dynamic when called:\r\n\r\n```c#\r\n[Get(\"/users/{user}\")]\r\nTask<User> GetUser([Path(\"user\")] string user, [Headers] string[] headers);\r\n\r\n\r\nstring[] headers = {\"dynamic-header: content\", \"header2: content\"}\r\nawait GetUser(\"forehalo\", headers);\r\n```\r\n\r\n### Form encoded and multipart\r\n\r\nForm will be encoded before send post request. You can use `Field` attribute to add field to the form.\r\n\r\n```c#\r\n[FormUrlEncoded]\r\n[Post(\"users\")]\r\nTask CreateUser([Field(\"username\")] string username, [Field(\"password\")] string password);\r\n```\r\n\r\nMultipart requests allow to send with files using `File` attribute, add form part using `Part` attribute.\r\n\r\n```c#\r\n[Multipart]\r\n[Post(\"users/{user}/avatar\")]\r\nTask UploadAvatar([Path(\"user\")] string username, [Part(\"id\")] int id, [File(\"file\")] StorageFile file);\r\n```\r\n\r\n### Event\r\n\r\nAn event named `OnSuccess` occured if response returned with status code between `200` and `300`, \r\nelse another event named `OnFailure` occured. \r\nYou could bind the event with an event handler, only one argument passed to handler which is the raw [`HttpResponseMessage`](https://msdn.microsoft.com/library/windows/apps/dn279631) instance\r\n\r\n```c#\r\n[Get(\"/users\")]\r\nTask<User> GetUser([Success] ResponseHanlder OnSuccess, [Failure] ResponseHanlder OnFailure);\r\n\r\n\r\nprivate void OnSuccess(HttpResponseMessage response)\r\n{\r\n    //\r\n}\r\n\r\nprivate void OnFailure(HttpResponseMessage response)\r\n{\r\n    //\r\n}\r\n\r\nvar result = await API.GetUser(OnSuccess, OnFailure);\r\n```\r\n\r\n\r\n\r\n\r\n## LICENSE\r\n\r\nCopyright 2016 Forehalo\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}